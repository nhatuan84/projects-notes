Build tensorflow from source code for PC and edge device:
- Check version compability of TF-Bazel-compiler: https://www.tensorflow.org/install/source
- Install JDK: sudo apt install default-jdk
- set JAVA_HOME
   export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-arm64/"
   export PATH=$JAVA_HOME/bin:$PATH
- Download "bazel-xxx-dist.zip" => unzip => run command "EXTRA_BAZEL_ARGS='--host_javabase=@local_jdk//:jdk' ./compile.sh" => copy output binary to "/usr/local/bin"
- Download "tensorflow-xxx.zip" => unzip => run "./configure" (build with cuda must choose YES) => (build c_api, c++ lib, python package)
- export TEST_TMPDIR=/instead/of/default/cache
bazel build -s -c opt --config=cuda //tensorflow/tools/pip_package:build_pip_package //tensorflow:libtensorflow.so //tensorflow:libtensorflow_cc.so
- After finished compiling, copy the output to specific folders:
  "sudo cp -r bazel-genfiles/ where_you_put_cc_code"
  "sudo cp -r tensorflow/cc where_you_put_cc_code/tensorflow"
  "sudo cp -r tensorflow/core where_you_put_cc_code/tensorflow"
  "sudo cp -r third_party where_you_put_cc_code"
  "sudo cp bazel-bin/tensorflow/libtensorflow_cc.so where_you_put_cc_code/lib"
  "sudo cp bazel-bin/tensorflow/libtensorflow_framework.so where_you_put_cc_code/lib"
- Protobuf
   + Download "protobuf-3.6.0.zip", unzip and run commands: "./autogen.sh", "./configure", "make && sudo make install", "sudo ldconfig"
 - Eigen3
   # Download eigen 3.3.4 from https://github.com/eigenteam/eigen-git-mirror/releases
   unzip eigen-git-mirror-3.3.4.zip
   cd eigen-git-mirror
   mkdir build && cd build
   cmake ..
   make
   sudo make install
 - Cmake
   + Run "sudo apt-get install cmake"
   include_directories("/usr/local/include/eigen3")
 - Opencv
   + Run "sudo apt-get install libopencv-dev", "sudo ldconfig"

Build TFLite for raspberry pi3 using CMake cross compiler or not

ARMCC_FLAGS="-march=armv7-a -mfpu=neon-vfpv4 -mfp16-format=ieee -funsafe-math-optimizations"
ARMCC_PREFIX=${HOME}/toolchains/gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf/bin/arm-linux-gnueabihf-
cmake -DCMAKE_C_COMPILER=${ARMCC_PREFIX}gcc \
  -DCMAKE_CXX_COMPILER=${ARMCC_PREFIX}g++ \
  -DCMAKE_C_FLAGS="${ARMCC_FLAGS}" \
  -DBUILD_SHARED_LIBS=1 \
  -DCMAKE_CXX_FLAGS="${ARMCC_FLAGS}" \
  -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
  -DCMAKE_SYSTEM_NAME=Linux \
  -DCMAKE_SYSTEM_PROCESSOR=armv7 \
  ../tensorflow/lite/

cmake -DTFLITE_ENABLE_XNNPACK=ON       -DTFLITE_ENABLE_MMAP=ON -DBUILD_SHARED_LIBS=1  -DCMAKE_BUILD_TYPE=Release     ../tensorflow/lite/
